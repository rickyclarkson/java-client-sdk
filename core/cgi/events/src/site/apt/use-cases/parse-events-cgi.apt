 ----------------------
 Parse events.cgi query
 ----------------------

~~ Enter the name of the use case in verb-noun format e.g. Borrow Books, Withdraw Cash. For completeness, also set the title of the document above to the same name.
Parse events.cgi query

* Summary:

 <Enter a few sentences or a paragraph which captures the essence of the use case. It should include the goal and principal actor and provide sufficient information to understand what the use case is about.>

 The replay server needs to parse an events.cgi query string into an object that provides programmatic access to all the fields within the query. It will then use that object to search for matching records in the event database.

* Related ticket(s):

 <Enter links to Trac tickets that are related to this use case.>
 ~~ e.g. {{{http://adwiki.ad-group.adh/ticket/1690}#1690}}
 
 {{{http://adwiki.ad-group.adh/ticket/2183}#2183 Events.cgi builder and parser}}
 
* Goal:

 <Briefly describe what the user intends to achieve with this use case.>
 
 To parse an events.cgi query string into an object that provides programmatic access to all the fields within the query.

* Actors:

 <An actor is someone or something outside the system that either acts on the system (a primary actor) or is acted on by the system (a secondary actor). An actor may be a person, a device, another system or sub-system, or time.>
 
 Replay server

* Pre-conditions:

 <Define all the conditions that must be true for it to be possible to trigger the use case.>
 
 None.

* Triggers:

 <Define the event that causes the use case to be initiated. This event can be external, temporal or internal. If the trigger is not a simple true "event" (e.g., the user presses a button), but instead "when a set of conditions are met", there will need to be a triggering process that continually (or periodically) runs to test whether the "trigger conditions" are met: the "triggering event" is a signal from the trigger process that the conditions are now met.>
 
 The user calls a method to parse the events.cgi query string.

* Basic success path:

 <Define the basic success path as a set of numbered steps or an activity diagram.>
 
 [[1]] The user calls a method to parse the events.cgi query string.
 

* Other succcess path(s):

 <<(Optional)>><If there are other paths that lead to a successful conclusion of the use case, define them here.>

 None.
 
* Exception paths:

 <<(Optional)>><Look at each of the success paths and what good go wrong at each stage. If there is scope for error, define how each error condition will be handled.>
 
 If the user passes <<<null>>> to the parse method, then a <<<NullPointerException>>> should be thrown.
 
 If the user passes an empty <<<String>>> to the parse method, then an <<<IllegalArgumentException>>> should be thrown.
 
 If the user passes a <<<String>>> which cannot be parsed for some other reason, then an <<<IllegalArgumentException>>> or appropriate derivative should be thrown.

* Post-conditions:

 <Define what the change in state of the system will be after the use case completes. Post-conditions are guaranteed to be true when the use case ends.>
 
 None.
 
* Notes:

 <<(Optional)>><Use this section to add any additional information that does not naturally fit into any of the above sections.>
 
 Events.cgi query strings passed to the parse method should be valid according to the rules defined in the build events.cgi use case. 
