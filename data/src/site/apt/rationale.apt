Rationale

* Threading Model

 The API caller will typically call ParserFactory.parserFor(StreamType.BINARY).parse(new StreamHandler...), where the StreamHandler is supplied by the caller.  We decided not to parallelise the parsing because it would make the caller's code more difficult to get right, unless we parallelised but ensured that StreamHandler's methods were always called on the original thread.  We decided that there would not be significant benefit in parallelising at this level, but the caller is of course able to control which thread to parse on.

* AudioDataStruct

 AudioDataStruct is a public class that provides access to the audio_data part of an audio packet.  It is backed by a ByteBuffer, and provides methods to mutate that ByteBuffer, which will fail if the ByteBuffer is read-only.

* BinaryParser

 BinaryParser is a package private class that implements parsing of the 'binary' stream format, and delivers packets of data to the StreamHandler.

* FrameParser

 FrameParser is a collection of parsers that deliver data to the StreamHandler.  It does any parsing required before delivery, e.g., constructing a JFIF header for truncated JPEG data.

* IO

 IO is a package private utility class, mainly used for extracting data from ByteBuffers, InputStreams and Strings.

* ImageDataStruct

 ImageDataStruct is a public class that provides access to the image_data part of an image packet.  It is backed by a ByteBuffer, and provides methods to mutate that ByteBuffer, which will fail if the ByteBuffer is read-only.

* JFIFHeader

 This takes an AD-stripped JFIF header into a valid JFIF header, which is used when parsing a JPEG stream, to retrieve valid JFIF data.

* MimeParser

 MimeParser is a package private class that implements parsing of mime streams, and delivers packets of data to the StreamHandler.  It currently only supports JFIF data, pending obtaining test data for MPEG-4.  JPEG is not intended to be supported, as the servers don't support emitting JPEG in a mime stream.

* Packet

 A Packet has data of a certain type, according to its type parameter.  It is usually a ByteBuffer but for an 'info' packet it is a String.  It also holds metadata about the data in the form of a PacketMetadata.

 Making Packet generic might not be the best approach; we might consider InfoPacket, JFIFPacket, etc.

* Parser

 A Parser takes an InputStream containing a certain data format and delivers packets of data from it to a StreamHandler.

* ParserFactory

 ParserFactory has a method, parserFor, that takes a StreamType and gives a Parser that can parse it.

* StreamHandler

 StreamHandler is the interface that the client is expected to implement to listen for data packets as they arrive.

* StreamType

 StreamType is an enumeration of the supported types of stream.

* VideoFormat

 VideoFormat is a representation of the video format field from the ImageDataStruct.