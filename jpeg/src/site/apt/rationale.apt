Rationale

 We will create a number of JPEG decoders, using the libraries provided by Java, adffmpeg and elsewhere, so that we can compare their performance, licence and implementation language.  We will provide a common interface to those decoders, so that we can change which implementation client code uses easily.

* Benchmarking

 We will create a benchmarking suite for this, which will, in separate processes, run the decoders on several images, timing the results.  To take the JVM's warmup time into consideration, we will disregard results from the first 10 seconds of operation.  We will run the decoders in separate processes to avoid any interference between them.

 Having created and executed this benchmarking suite, we found that ByteBuffer was very slightly slower on average than byte[] as an input type, but far more convenient for our uses, so we made JPEGDecoder only support decodeJPEG(ByteBuffer).  There is a single test image on which using ByteBuffer as an input type causes the overall speed to halve, but tests against other images of the same size show that to be a one-off.  The benchmarking suite was executed on Linux and Windows XP.  To be able to keep byte[] as a possible input type for performance tests, we created JPEGDecoderFromArray, which has to be exposed as public because both the adffmpeg and jpeg packages need to implement it.

 We also found that Toolkit beats ADFFMPEG on most small images and is comparable on large images, so we are optimistic that we can take out the ADFFMPEG dependency, at least for JPEG decoding.  ImageIO turned out to be slower than the others, but in larger performance tests involving actual rendering ImageIO might perform better because it delivers a BufferedImage, which can benefit from hardware acceleration.

* JPEG decoders 

** ImageIO

 ImageIO is the generally-recommended mechanism in Java for decoding images, though it is documented that for some cases it will be slower than Toolkit.createImage, the other Java-provided mechanism.  It is certainly the most straightforward to use.

** Toolkit.createImage

 Toolkit.createImage is the oldest mechanism for decoding images in Java.  It can return to the user before decoding is complete, which then means the user typically provides a callback that gets invoked whenever more image data is available.  We expect Toolkit.createImage to outperform ImageIO in some cases, but Sun are working on ImageIO's performance and not Toolkit.createImage's performance.

** FFmpeg

 While FFmpeg is designed for decoding more conventional video formats, its JPEG decoder is reported to be "ridiculously fast" by one of the FFmpeg maintainers.  We already use this decoder, but it might be worth looking into any improvements we can gain from using it differently.  The version we use is relatively old; we might get some benefit from a newer version.

** {{{http://webuser.hs-furtwangen.de/~dersch/}Panorama Tools}}

 Panorama has a number of tools and libraries, but one of interest is the pure Java JPEG decoder.  It was written with mobile devices in mind, but that shouldn't have adverse effects on its performance on desktop PCs.

 Unfortunately, the JPEGDecoder.java file from Panorama is under the General Public License (GPL), meaning that the legal implications of using it from our proprietary software are subjective.  Some of the other code from the same site is available under the less problematic Lesser General Public License (LGPL), so we might find JPEGDecoder.java available with a less restrictive licence elsewhere, or the author might be willing to relicense JPEGDecoder.java.

** {{{http://www.saillard.org/programs_and_patches/tinyjpegdecoder/}TinyJPEGDecoder}}

 This is a C JPEG decoder, again with the troublesome GPL.

** {{{http://www.ijg.org/}The Independent JPEG Group's libjpeg}}

 This site has a more liberally licenced JPEG decoder written in C, but the latest release was made in 1998.  It appears to have been well-tested at the time, and is used by a lot of programs.  The licence states that you may use the software for any purpose, but you must acknowledge the Independent JPEG Group in documentation.

 There is a SourceForge project, {{{http://gnuwin32.sourceforge.net/packages/jpeg.htm}gnuwin32}}that contains what looks to be a Windows-specific  version of this library, last updated in 2005 - there may be functional changes too.

 A comment in the JDK's source code mentions that Java's JPEG decoding is a modification of libjpeg.

** {{{http://www.intel.com/cd/software/products/asmo-na/eng/302910.htm#vc}Intel Integrated Performance Primitives}}

 This is a library containing a JPEG decoder that targets Intel CPUs.  It costs money, though an evaluation version is available.  It is only available for Linux and Windows.  It will be interesting to see if it is markedly faster, but it would be awkward to depend on processor-specific libraries.

 I tried the evaluation version for Linux, and found that it had build errors, as documented in a {{{http://software.intel.com/en-us/forums/intel-integrated-performance-primitives/topic/63383/}forum topic I started}}.  I tried to fix those myself, and it looked possible, but a timesink, so pending the forum topic yielding results, I moved on.

** {{{http://en.wikipedia.org/wiki/CUDA}Nvidia's CUDA}}

 Many modern PCs have high-powered graphics cards, which are particularly optimised for running many instructions in parallel.  These cards are programmable via card-specific libraries/languages like CUDA, though there may be more general tools available.  CUDA is available for free, though under a proprietary licence.

 Nvidia-only libraries are probably not what we will use, but it would be interesting to know how much of a speedup they would give us.  XvNC and DXVA (next in this document), or similar-level libraries, might be more practical to use directly.

 I don't have an Nvidia card to try this with, but it's still worth a mention.

** {{{http://en.wikipedia.org/wiki/X-Video_Motion_Compensation}XvMC - X Video Motion Compensation}} and {{{http://en.wikipedia.org/wiki/DirectX_Video_Acceleration}DXVA - DirectX Video Acceleration}}

 These two libraries provide support for offloading video decoding to the graphics card, but XvMC doesn't appear to support JPEG in particular.  DXVA doesn't either, but it does support individual parts that are necessary for JPEG decoding; iDCT operations and Huffman coding.  It is linked to the DirectShow framework, but appears to be usable without DirectShow.

 FFmpeg already has XvMC support, though not for JPEG.  FFmpeg doesn't appear to have DXVA support.

** {{{http://en.wikipedia.org/wiki/OpenCV}OpenCV}}

 OpenCV was an Intel project originally which provided a graphics library that would work on any graphics card but would detect Intel hardware and accelerate itself using that.  Now it is an open source project that has lain dormant for some years, but is more active as of September 2008.

** {{{https://picoforge.int-evry.fr/cgi-bin/twiki/view/Gpucv/Web/WebHome}GpuCV}}

 GpuCV is an attempt to provide something like OpenCV but which supports hardware acceleration on more graphics cards.  It is mainly developed on Windows, but beta versions include Linux support.  GpuCV is under a similar licence to the BSD licence (everything permitted except suing the copyright holder).

 Neither OpenCV nor GpuCV are known to explicitly support JPEG decoding, but it might not be a mammoth task to port one of the smaller JPEG decoders written in C to them.