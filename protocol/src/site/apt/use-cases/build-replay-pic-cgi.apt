 ----------------------
 Build ReplayPicCGI query
 ----------------------

~~ Enter the name of the use case in verb-noun format e.g. Borrow Books, Withdraw Cash. For completeness, also set the title of the document above to the same name.
Build ReplayPicCGI Query

* Summary:

 <Enter a few sentences or a paragraph which captures the essence of the use case. It should include the goal and principal actor and provide sufficient information to understand what the use case is about.>

 SDK clients need to be able to build replay_pic.cgi queries that they can send to NetVu Connected servers.  In the majority of cases, the SDK client will be higher layers in the SDK itself.

* Related ticket(s):

 <Enter links to Trac tickets that are related to this use case.>
 ~~ e.g. {{{http://adwiki.ad-group.adh/ticket/1690}#1690}}
 
 {{{http://adwiki.ad-group.adh/ticket/3195}#3195 ReplayPicCGI builder and parser}}
 
* Goal:

 <Briefly describe what the user intends to achieve with this use case.>
 
 To build a replay_pic.cgi query that can subsequently be used in a HTTP request to a NetVu Connected server.

* Actors:

 <An actor is someone or something outside the system that either acts on the system (a primary actor) or is acted on by the system (a secondary actor). An actor may be a person, a device, another system or sub-system, or time.>
 
 SDK client

* Pre-conditions:

 <Define all the conditions that must be true for it to be possible to trigger the use case.>
 
 None.

* Triggers:

 <Define the event that causes the use case to be initiated. This event can be external, temporal or internal. If the trigger is not a simple true "event" (e.g., the user presses a button), but instead "when a set of conditions are met", there will need to be a triggering process that continually (or periodically) runs to test whether the "trigger conditions" are met: the "triggering event" is a signal from the trigger process that the conditions are now met.>
 
 The user calls a method which initializes the build.

* Basic success path:

 <Define the basic success path as a set of numbered steps or an activity diagram.>
 
 [[1]] The user starts to build the query.
 
 [[2]] The user adds zero or more parameters to the query.
 
 [[3]] The user finishes building the query.

* Other succcess path(s):

 <<(Optional)>><If there are other paths that lead to a successful conclusion of the use case, define them here.>

 None.
 
* Exception paths:

 <<(Optional)>><Look at each of the success paths and what good go wrong at each stage. If there is scope for error, define how each error condition will be handled.>
 
 At stage 2 of the basic success path, there are two potential problems that could occur:
 
 [[i]] The user could pass an invalid value for one of the parameters. In this case a runtime exception should be thrown.
 
 [[ii]] The addition of a parameter would create a query that is invalid or otherwise guaranteed to return zero results. In this case a runtime exception should be thrown.

* Post-conditions:

 <Define what the change in state of the system will be after the use case completes. Post-conditions are guaranteed to be true when the use case ends.>
 
 None.
 
* Notes:

 <<(Optional)>><Use this section to add any additional information that does not naturally fit into any of the above sections.>

 See the {{{http://adwiki.ad-group.adh/attachment/wiki/DevelopmentSite/AD/Client/Vserve%20Specification.pdf}Video Server Specification}} for more details.
